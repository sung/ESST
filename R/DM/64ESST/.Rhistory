ls
ls()
dist_table <- read.table("/BiO/Backup/Research/Toccata/ESST/R/64ESST/64ESST.txt")
pca<-prcomp(dist_table, scale=TRUE);
summary(pca);
library("RMySQL")
# create a MySQL instance and create one connection.
dbm <- dbManager("MySQL")
# open the connection using host, dbname, port, user, passsword, etc., as
# configuration file \file{\$HOME/.my.cnf}
dbi <- dbConnect(dbm, dbname='ESST')
sth <- dbExec(dbi, "--     * by env 
SELECT t3.env, count(*) AS cnt
FROM ESST.ESSTSource t1, FACEVIEW.SCOPMap1_71 t2, GLORIA.ResAnno t3
WHERE t1.matrix='ALL' AND t1.mat_type='MaskB'
AND t1.px=t2.px
AND t2.pdb=t3.pdb
AND t2.chain=t3.pdb_chain_id
AND t2.pdb_local_rescued_res_start<=t3.pdb_local_rescued_res_num
AND t2.pdb_local_rescued_res_end>=t3.pdb_local_rescued_res_num
GROUP BY t3.env
")
occur <- fetch(sth, n=-1)
close(sth)
num<- length(row.names(occur))
cv.prop<-vector()
for(i in 1:num) (cv.prop[i]<-rev(heat.colors(num))[order(order(occur$cnt))[i]])
cv.sol<-vector()
for(i in grep('A', rownames(pca$x))) cv.sol[i]<-'blue'
for(i in grep('a', rownames(pca$x))) cv.sol[i]<-'red'
#2. By the class of secondary structure 
cv.ss<-vector()
for(i in grep('C', rownames(pca$x))) cv.ss[i]<-'yellow'
for(i in grep('E', rownames(pca$x))) cv.ss[i]<-'blue'
for(i in grep('H', rownames(pca$x))) cv.ss[i]<-'red'
for(i in grep('P', rownames(pca$x))) cv.ss[i]<-'black'
#3. By Hbonds (from side-chain)
#3.1 side chain to NH
cv.hb.n<-vector()
for(i in grep('N', rownames(pca$x))) cv.hb.n[i]<-'blue'
for(i in grep('n', rownames(pca$x))) cv.hb.n[i]<-'black'
#3.2 side chain to CO 
cv.hb.o<-vector()
for(i in grep('O', rownames(pca$x))) cv.hb.o[i]<-'red'
for(i in grep('o', rownames(pca$x))) cv.hb.o[i]<-'black'
#3.2 side chain to side-chain 
cv.hb.s<-vector()
for(i in grep('S', rownames(pca$x))) cv.hb.s[i]<-'yellow'
for(i in grep('s', rownames(pca$x))) cv.hb.s[i]<-'black'
#3.3 son vs non-son
cv.hb.son<-vector()
for(i in grep('son', rownames(pca$x))) cv.hb.son[i]<-'yellow'
for(i in setdiff(1:num, grep('son', rownames(pca$x)))) cv.hb.son[i]<-'black'
#3.4 "SON" "SOn" "SoN" "Son" "sON" "sOn" "soN" "son"
cv.hb<-vector()
hb.type<-c("SON"=1, "SOn"=2, "SoN"=3, "Son"=4, "sON"=5, "sOn"=6, "soN"=7, "son"=8)
for(i in names(hb.type)){
    for(j in grep(i, rownames(pca$x))) cv.hb[j]<-rainbow(length(hb.type))[hb.type[i]]
}
library(rgl)
cv<-cv.sol
cv<-cv.sol
rgl::plot3d(pca$x, main='PCA for 64 ENV types', type='n'); text3d(pca$x, text=rownames(pca$x), cex=0.6, col=palette(cv)); bg3d("lightgray")
rgl::plot3d(pca$x, main='PCA for 64 ENV types', type='n'); text3d(pca$x, text=rownames(pca$x), cex=0.6, col=palette(cv)); bg3d("lightgray")
rgl::plot3d(pca$x, main='PCA for 64 ENV types', type='n'); text3d(pca$x, text=rownames(pca$x), cex=0.6, col=palette(cv)); bg3d("lightgray")
rgl::plot3d(pca$x, main='PCA for 64 ENV (dist mat)', type='n'); text3d(pca$x, text=rownames(pca$x), cex=0.6, col=palette(cv)); bg3d("lightgray")
q()
ls()
library(rgl)
cv<-cv.sol
rgl::plot3d(pca$x, main='PCA for 64 ENV (distance matirx)', type='n'); text3d(pca$x, text=rownames(pca$x), cex=0.6, col=palette(cv)); bg3d("lightgray")
rgl::plot3d(pca$x, main='PCA for 64 ENV (distance matirx)', type='n'); text3d(pca$x, text=rownames(pca$x), cex=0.6, col=palette(cv)); bg3d("lightgray")
cv<-cv.ss
cv<-cv.ss
rgl::plot3d(pca$x, main='PCA for 64 ENV (distance matirx)', type='n'); text3d(pca$x, text=rownames(pca$x), cex=0.6, col=palette(cv)); bg3d("lightgray")
rgl::plot3d(pca$x, main='PCA for 64 ENV (distance matirx)', type='n'); text3d(pca$x, text=rownames(pca$x), cex=0.6, col=palette(cv)); bg3d("lightgray")
cv<-cv.hb.n
rgl::plot3d(pca$x, main='PCA for 64 ENV (distance matirx)', type='n'); text3d(pca$x, text=rownames(pca$x), cex=0.6, col=palette(cv)); bg3d("lightgray")
rgl::plot3d(pca$x, main='PCA for 64 ENV (distance matirx)', type='n'); text3d(pca$x, text=rownames(pca$x), cex=0.6, col=palette(cv)); bg3d("lightgray")
cv<-cv.hb.co
cv<-cv.hb.o
rgl::plot3d(pca$x, main='PCA for 64 ENV (distance matirx)', type='n'); text3d(pca$x, text=rownames(pca$x), cex=0.6, col=palette(cv)); bg3d("lightgray")
rgl::plot3d(pca$x, main='PCA for 64 ENV (distance matirx)', type='n'); text3d(pca$x, text=rownames(pca$x), cex=0.6, col=palette(cv)); bg3d("lightgray")
q()
cv.ss<-vector()
for(i in grep('C', rownames(pca$x))) cv.ss[i]<-'green'
for(i in grep('E', rownames(pca$x))) cv.ss[i]<-'blue'
for(i in grep('H', rownames(pca$x))) cv.ss[i]<-'red'
for(i in grep('P', rownames(pca$x))) cv.ss[i]<-'black'
cv<-cv.ss
library(rgl)
rgl::plot3d(pca$x, type='n'); text3d(pca$x, text=rownames(pca$x), cex=0.6, col=palette(cv)); bg3d("lightgray")
rgl::plot3d(pca$x, type='n'); text3d(pca$x, text=rownames(pca$x), cex=0.6, col=palette(cv)); bg3d("lightgray")
cv<-cv.sol
rgl::plot3d(pca$x, type='n'); text3d(pca$x, text=rownames(pca$x), cex=0.6, col=palette(cv)); bg3d("lightgray")
rgl::plot3d(pca$x, type='n'); text3d(pca$x, text=rownames(pca$x), cex=0.6, col=palette(cv)); bg3d("lightgray")
q()
ls()
library(rgl)
plot3d(pca$x, main='PCA for 64 ENV (distance matirx)', type='n'); text3d(pca$x, text=rownames(pca$x), cex=0.6, col=palette(cv)); bg3d("lightgray")
plot3d(pca$x,type='n'); text3d(pca$x, text=rownames(pca$x), cex=0.6, col=palette(cv)); bg3d("lightgray")
cv<-cv.sol
plot3d(pca$x,type='n'); text3d(pca$x, text=rownames(pca$x), cex=0.6, col=palette(cv)); bg3d("lightgray")
plot3d(pca$x,type='n'); text3d(pca$x, text=rownames(pca$x), cex=1.0, col=palette(cv)); bg3d("lightgray")
cv<-cv.hb.n
plot3d(pca$x,type='n'); text3d(pca$x, text=rownames(pca$x), cex=1.0, col=palette(cv)); bg3d("lightgray")
plot3d(pca$x,type='n'); text3d(pca$x, text=rownames(pca$x), cex=1.0, col=palette(cv)); bg3d("lightgray")
cv<-cv.ss
plot3d(pca$x,type='n'); text3d(pca$x, text=rownames(pca$x), cex=1.0, col=palette(cv)); bg3d("lightgray")
plot3d(pca$x,type='n'); text3d(pca$x, text=rownames(pca$x), cex=1.0, col=palette(cv)); bg3d("lightgray")
cv<-cv.hn.o
cv<-cv.hb.o
plot3d(pca$x,type='n'); text3d(pca$x, text=rownames(pca$x), cex=1.0, col=palette(cv)); bg3d("lightgray")
plot3d(pca$x,type='n'); text3d(pca$x, text=rownames(pca$x), cex=1.0, col=palette(cv)); bg3d("lightgray")
q()
